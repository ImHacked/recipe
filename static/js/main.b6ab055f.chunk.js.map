{"version":3,"sources":["Recipe.js","Header.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","image","url","ingri","className","style","recipe","list","map","ing","text","link","href","src","alt","Header","head","para","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","getRecipes","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","label","ingredients","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cors","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"iQAmBeA,MAff,YAA0C,IAAzBC,EAAwB,EAAxBA,MAAMC,EAAkB,EAAlBA,MAAMC,EAAY,EAAZA,IAAIC,EAAQ,EAARA,MAC7B,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UAEI,6BAAKN,IACL,oBAAII,UAAWC,IAAME,KAArB,SACKJ,EAAMK,KAAI,SAAAC,GAAG,OAAG,6BAAKA,EAAIC,YAE9B,mBAAGN,UAAWC,IAAMM,KAAMC,KAAMV,EAAhC,oCAEA,qBAAKE,UAAWC,IAAMJ,MAAOY,IAAKZ,EAAMa,IAAI,SCDzCC,MAVf,WACI,OACI,sBAAKX,UAAWC,IAAMU,OAAtB,UACI,oBAAIX,UAAWC,IAAMW,KAArB,yBACA,mBAAGZ,UAAWC,IAAMY,KAApB,8CC+DGC,MAjEf,WAEI,IAFW,EASiBC,mBAAS,IAT1B,mBASJC,EATI,KASIC,EATJ,OAUcF,mBAAS,IAVvB,mBAUJG,EAVI,KAUGC,EAVH,OAWYJ,mBAAS,WAXrB,mBAWJK,EAXI,KAWEC,EAXF,KA4Cb,OA9BEC,qBAAU,YAEQ,uCAAC,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCJ,EAApC,mBAfjB,WAeiB,oBAdhB,qCAaK,cACTK,EADS,gBAEGA,EAASC,OAFZ,OAETC,EAFS,OAGfV,EAAWU,EAAKC,MAHD,2CAAD,qDAMhBC,KAGD,CAACT,IAoBF,sBAAKpB,UAAU,MAAf,UACC,cAAC,EAAD,IACD,uBAAM8B,SAZQ,SAAAC,GACdA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KASiBnB,UAAU,cAArC,UACA,uBAAOA,UAAU,aAAaiC,KAAK,OAAOC,MAAOhB,EAAQiB,SAnBxC,SAAAJ,GAEjBZ,EAAUY,EAAEK,OAAOF,QAiB8DG,YAAY,mDAC7F,wBAAQrC,UAAU,gBAAgBiC,KAAK,SAAvC,uBAIA,sBAAKjC,UAAU,SAAf,UAECgB,EAAQZ,KAAI,SAAAF,GAAM,OACjB,cAAC,EAAD,CAAQN,MAAOM,EAAOA,OAAOoC,MAAOxC,IAAKI,EAAOA,OAAOJ,IAAKD,MAAOK,EAAOA,OAAOL,MAAOE,MAAOG,EAAOA,OAAOqC,iBAH/G,WC9CgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,aCEbQ,KAEDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAACe,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE3G5BvB,K,kBCzBAwB,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,KAAO,qBAAqB,KAAO,qBAAqB,OAAS,uBAAuB,KAAO,qBAAqB,KAAO,wB","file":"static/js/main.b6ab055f.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from \"./recipe.module.css\";\r\n\r\n\r\nfunction Recipe({title,image,url,ingri}) {\r\n    return (\r\n        <div className={style.recipe}>\r\n           \r\n            <h1>{title}</h1>\r\n            <ol className={style.list}>\r\n                {ingri.map(ing=>(<li>{ing.text}</li>))}\r\n            </ol>\r\n            <a className={style.link} href={url}>Know Full Receipe Here</a>\r\n            \r\n            <img className={style.image} src={image}alt=\"\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe\r\n","import React from 'react';\r\nimport style from \"./recipe.module.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className={style.Header}>\r\n            <h1 className={style.head}>Foodie Bear</h1>\r\n            <p className={style.para}>Search your favourite Recipe</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n","import {React,useEffect,useState} from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\nimport Header from \"./Header\";\n\nfunction App() {\n    \n    const APP_ID=\"3069e377\";\n    const APP_KEY=\"53e408e6cfe8be637ca8dc6905aea6c4\";\n\n   \n\n\n  \n    const [recipes,setRecipes]= useState([]);\n    const [search,setSearch]=useState(\"\");\n    const [query,setQuery]=useState('chicken')\n\n\n    useEffect(() => {\n      \n      const getRecipes=async()=>{\n        const response=await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n        const data= await response.json();\n        setRecipes(data.hits);\n      }\n\n      getRecipes();\n    \n      \n  }, [query]);\n\n\n\n  const updateSearch=e=>{\n\n    setSearch(e.target.value);\n\n  }\n\n  const getSearch=e=>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  \n\n\n  return (\n    <div className=\"App\">\n     <Header></Header>\n    <form onSubmit={getSearch} className=\"search-form\" >\n    <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} placeholder=\"Search Recipies by main ingradient e.g Chicken\" />\n    <button className=\"search-button\" type=\"submit\" >Search</button>\n       \n      \n    </form>\n    <div className=\"recipe\">\n\n    {recipes.map(recipe=>(\n      <Recipe title={recipe.recipe.label} url={recipe.recipe.url} image={recipe.recipe.image} ingri={recipe.recipe.ingredients} />\n    ))};\n    </div>\n   \n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport cors from \"cors\"\n\n\n(cors()) // Use this after the variable declaration\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1gTDh\",\"image\":\"recipe_image__2lQLj\",\"link\":\"recipe_link__1FB-p\",\"list\":\"recipe_list__H7eGY\",\"Header\":\"recipe_Header__fzyDC\",\"head\":\"recipe_head__2To2Z\",\"para\":\"recipe_para__3a2V7\"};"],"sourceRoot":""}